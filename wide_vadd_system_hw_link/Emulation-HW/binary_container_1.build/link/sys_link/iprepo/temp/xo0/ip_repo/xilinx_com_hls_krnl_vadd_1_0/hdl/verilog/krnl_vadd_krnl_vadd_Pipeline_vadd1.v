// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module krnl_vadd_krnl_vadd_Pipeline_vadd1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        sext_ln52_1,
        sext_ln52,
        sext_ln52_2,
        zext_ln52,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [63:0] m_axi_gmem0_AWADDR;
output  [0:0] m_axi_gmem0_AWID;
output  [31:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [0:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [511:0] m_axi_gmem0_WDATA;
output  [63:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [0:0] m_axi_gmem0_WID;
output  [0:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [63:0] m_axi_gmem0_ARADDR;
output  [0:0] m_axi_gmem0_ARID;
output  [31:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [0:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [511:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [0:0] m_axi_gmem0_RID;
input  [0:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [0:0] m_axi_gmem0_BID;
input  [0:0] m_axi_gmem0_BUSER;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [63:0] m_axi_gmem1_AWADDR;
output  [0:0] m_axi_gmem1_AWID;
output  [31:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [0:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [511:0] m_axi_gmem1_WDATA;
output  [63:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [0:0] m_axi_gmem1_WID;
output  [0:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [63:0] m_axi_gmem1_ARADDR;
output  [0:0] m_axi_gmem1_ARID;
output  [31:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [0:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [511:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [0:0] m_axi_gmem1_RID;
input  [0:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [0:0] m_axi_gmem1_BID;
input  [0:0] m_axi_gmem1_BUSER;
input  [57:0] sext_ln52_1;
input  [57:0] sext_ln52;
input  [57:0] sext_ln52_2;
input  [31:0] zext_ln52;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg m_axi_gmem0_WVALID;
reg m_axi_gmem0_RREADY;
reg m_axi_gmem1_RREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln52_reg_855;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln52_15_fu_387_p2;
wire   [0:0] icmp_ln52_14_fu_376_p2;
wire   [0:0] icmp_ln52_13_fu_365_p2;
wire   [0:0] icmp_ln52_12_fu_354_p2;
wire   [0:0] icmp_ln52_11_fu_343_p2;
wire   [0:0] icmp_ln52_10_fu_332_p2;
wire   [0:0] icmp_ln52_9_fu_321_p2;
wire   [0:0] icmp_ln52_8_fu_310_p2;
wire   [0:0] icmp_ln52_7_fu_299_p2;
wire   [0:0] icmp_ln52_6_fu_288_p2;
wire   [0:0] icmp_ln52_5_fu_277_p2;
wire   [0:0] icmp_ln52_4_fu_266_p2;
wire   [0:0] icmp_ln52_3_fu_255_p2;
wire   [0:0] icmp_ln52_2_fu_244_p2;
wire   [0:0] icmp_ln52_1_fu_233_p2;
wire   [0:0] icmp_ln52_fu_222_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem1_blk_n_R;
wire    ap_block_pp0_stage0;
reg    gmem0_blk_n_R;
reg    gmem0_blk_n_W;
wire   [63:0] zext_ln52_cast_fu_198_p1;
reg   [63:0] zext_ln52_cast_reg_820;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln52_reg_855_pp0_iter2_reg;
reg   [0:0] icmp_ln52_1_reg_859;
reg   [0:0] icmp_ln52_1_reg_859_pp0_iter2_reg;
reg   [0:0] icmp_ln52_2_reg_863;
reg   [0:0] icmp_ln52_2_reg_863_pp0_iter2_reg;
reg   [0:0] icmp_ln52_3_reg_867;
reg   [0:0] icmp_ln52_3_reg_867_pp0_iter2_reg;
reg   [0:0] icmp_ln52_4_reg_871;
reg   [0:0] icmp_ln52_4_reg_871_pp0_iter2_reg;
reg   [0:0] icmp_ln52_5_reg_875;
reg   [0:0] icmp_ln52_5_reg_875_pp0_iter2_reg;
reg   [0:0] icmp_ln52_6_reg_879;
reg   [0:0] icmp_ln52_6_reg_879_pp0_iter2_reg;
reg   [0:0] icmp_ln52_7_reg_883;
reg   [0:0] icmp_ln52_7_reg_883_pp0_iter2_reg;
reg   [0:0] icmp_ln52_8_reg_887;
reg   [0:0] icmp_ln52_8_reg_887_pp0_iter2_reg;
reg   [0:0] icmp_ln52_9_reg_891;
reg   [0:0] icmp_ln52_9_reg_891_pp0_iter2_reg;
reg   [0:0] icmp_ln52_10_reg_895;
reg   [0:0] icmp_ln52_10_reg_895_pp0_iter2_reg;
reg   [0:0] icmp_ln52_11_reg_899;
reg   [0:0] icmp_ln52_11_reg_899_pp0_iter2_reg;
reg   [0:0] icmp_ln52_12_reg_903;
reg   [0:0] icmp_ln52_12_reg_903_pp0_iter2_reg;
reg   [0:0] icmp_ln52_13_reg_907;
reg   [0:0] icmp_ln52_13_reg_907_pp0_iter2_reg;
reg   [0:0] icmp_ln52_14_reg_911;
reg   [0:0] icmp_ln52_14_reg_911_pp0_iter2_reg;
reg   [0:0] icmp_ln52_15_reg_915;
reg   [0:0] icmp_ln52_15_reg_915_pp0_iter2_reg;
wire   [31:0] trunc_ln55_fu_415_p1;
reg   [31:0] trunc_ln55_reg_919;
reg   [31:0] lshr_ln_reg_924;
wire   [31:0] trunc_ln55_1_fu_429_p1;
reg   [31:0] trunc_ln55_1_reg_929;
reg   [31:0] lshr_ln55_1_reg_934;
reg   [31:0] lshr_ln55_s_reg_939;
reg   [31:0] lshr_ln55_12_reg_944;
reg   [31:0] lshr_ln55_2_reg_949;
reg   [31:0] lshr_ln55_15_reg_954;
reg   [31:0] lshr_ln55_3_reg_959;
reg   [31:0] lshr_ln55_16_reg_964;
reg   [31:0] lshr_ln55_4_reg_969;
reg   [31:0] lshr_ln55_17_reg_974;
reg   [31:0] lshr_ln55_5_reg_979;
reg   [31:0] lshr_ln55_18_reg_984;
reg   [31:0] lshr_ln55_6_reg_989;
reg   [31:0] lshr_ln55_19_reg_994;
reg   [31:0] lshr_ln55_7_reg_999;
reg   [31:0] lshr_ln55_20_reg_1004;
reg   [31:0] lshr_ln55_8_reg_1009;
reg   [31:0] lshr_ln55_21_reg_1014;
reg   [31:0] lshr_ln55_9_reg_1019;
reg   [31:0] lshr_ln55_22_reg_1024;
reg   [31:0] lshr_ln55_10_reg_1029;
reg   [31:0] lshr_ln55_23_reg_1034;
reg   [31:0] lshr_ln55_11_reg_1039;
reg   [31:0] lshr_ln55_24_reg_1044;
reg   [31:0] lshr_ln55_25_reg_1049;
reg   [31:0] lshr_ln55_26_reg_1054;
reg   [31:0] lshr_ln55_13_reg_1059;
reg   [31:0] lshr_ln55_27_reg_1064;
reg   [31:0] lshr_ln55_14_reg_1069;
reg   [31:0] lshr_ln55_28_reg_1074;
wire   [31:0] add_ln55_fu_728_p2;
reg   [31:0] add_ln55_reg_1084;
wire   [31:0] add_ln55_1_fu_732_p2;
reg   [31:0] add_ln55_1_reg_1089;
wire   [31:0] add_ln55_2_fu_736_p2;
reg   [31:0] add_ln55_2_reg_1094;
wire   [31:0] add_ln55_3_fu_740_p2;
reg   [31:0] add_ln55_3_reg_1099;
wire   [31:0] add_ln55_4_fu_744_p2;
reg   [31:0] add_ln55_4_reg_1104;
wire   [31:0] add_ln55_5_fu_748_p2;
reg   [31:0] add_ln55_5_reg_1109;
wire   [31:0] add_ln55_6_fu_752_p2;
reg   [31:0] add_ln55_6_reg_1114;
wire   [31:0] add_ln55_7_fu_756_p2;
reg   [31:0] add_ln55_7_reg_1119;
wire   [31:0] add_ln55_8_fu_760_p2;
reg   [31:0] add_ln55_8_reg_1124;
wire   [31:0] add_ln55_9_fu_764_p2;
reg   [31:0] add_ln55_9_reg_1129;
wire   [31:0] add_ln55_10_fu_768_p2;
reg   [31:0] add_ln55_10_reg_1134;
wire   [31:0] add_ln55_11_fu_772_p2;
reg   [31:0] add_ln55_11_reg_1139;
wire   [31:0] add_ln55_12_fu_776_p2;
reg   [31:0] add_ln55_12_reg_1144;
wire   [31:0] add_ln55_13_fu_780_p2;
reg   [31:0] add_ln55_13_reg_1149;
wire   [31:0] add_ln55_14_fu_784_p2;
reg   [31:0] add_ln55_14_reg_1154;
wire   [31:0] add_ln55_15_fu_788_p2;
reg   [31:0] add_ln55_15_reg_1159;
reg    ap_condition_exit_pp0_iter3_stage0;
reg    ap_block_pp0_stage0_01001;
reg   [63:0] i_0_fu_152;
wire   [63:0] add_ln52_fu_392_p2;
wire    ap_loop_init;
wire   [63:0] or_ln52_fu_227_p2;
wire   [63:0] or_ln52_1_fu_238_p2;
wire   [63:0] or_ln52_2_fu_249_p2;
wire   [63:0] or_ln52_3_fu_260_p2;
wire   [63:0] or_ln52_4_fu_271_p2;
wire   [63:0] or_ln52_5_fu_282_p2;
wire   [63:0] or_ln52_6_fu_293_p2;
wire   [63:0] or_ln52_7_fu_304_p2;
wire   [63:0] or_ln52_8_fu_315_p2;
wire   [63:0] or_ln52_9_fu_326_p2;
wire   [63:0] or_ln52_10_fu_337_p2;
wire   [63:0] or_ln52_11_fu_348_p2;
wire   [63:0] or_ln52_12_fu_359_p2;
wire   [63:0] or_ln52_13_fu_370_p2;
wire   [63:0] or_ln52_14_fu_381_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_ext_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_1057;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

krnl_vadd_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter3_stage0)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_0_fu_152 <= 64'd0;
        end else if ((1'b1 == ap_condition_1057)) begin
            i_0_fu_152 <= add_ln52_fu_392_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_10_reg_895_pp0_iter2_reg == 1'd0) & (icmp_ln52_9_reg_891_pp0_iter2_reg == 1'd0) & (icmp_ln52_8_reg_887_pp0_iter2_reg == 1'd0) & (icmp_ln52_7_reg_883_pp0_iter2_reg == 1'd0) & (icmp_ln52_6_reg_879_pp0_iter2_reg == 1'd0) & (icmp_ln52_5_reg_875_pp0_iter2_reg == 1'd0) & (icmp_ln52_4_reg_871_pp0_iter2_reg == 1'd0) & (icmp_ln52_3_reg_867_pp0_iter2_reg == 1'd0) & (icmp_ln52_2_reg_863_pp0_iter2_reg == 1'd0) & (icmp_ln52_1_reg_859_pp0_iter2_reg == 1'd0) & (icmp_ln52_reg_855_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln55_10_reg_1134 <= add_ln55_10_fu_768_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_11_reg_899_pp0_iter2_reg == 1'd0) & (icmp_ln52_10_reg_895_pp0_iter2_reg == 1'd0) & (icmp_ln52_9_reg_891_pp0_iter2_reg == 1'd0) & (icmp_ln52_8_reg_887_pp0_iter2_reg == 1'd0) & (icmp_ln52_7_reg_883_pp0_iter2_reg == 1'd0) & (icmp_ln52_6_reg_879_pp0_iter2_reg == 1'd0) & (icmp_ln52_5_reg_875_pp0_iter2_reg == 1'd0) & (icmp_ln52_4_reg_871_pp0_iter2_reg == 1'd0) & (icmp_ln52_3_reg_867_pp0_iter2_reg == 1'd0) & (icmp_ln52_2_reg_863_pp0_iter2_reg == 1'd0) & (icmp_ln52_1_reg_859_pp0_iter2_reg == 1'd0) & (icmp_ln52_reg_855_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln55_11_reg_1139 <= add_ln55_11_fu_772_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_12_reg_903_pp0_iter2_reg == 1'd0) & (icmp_ln52_11_reg_899_pp0_iter2_reg == 1'd0) & (icmp_ln52_10_reg_895_pp0_iter2_reg == 1'd0) & (icmp_ln52_9_reg_891_pp0_iter2_reg == 1'd0) & (icmp_ln52_8_reg_887_pp0_iter2_reg == 1'd0) & (icmp_ln52_7_reg_883_pp0_iter2_reg == 1'd0) & (icmp_ln52_6_reg_879_pp0_iter2_reg == 1'd0) & (icmp_ln52_5_reg_875_pp0_iter2_reg == 1'd0) & (icmp_ln52_4_reg_871_pp0_iter2_reg == 1'd0) & (icmp_ln52_3_reg_867_pp0_iter2_reg == 1'd0) & (icmp_ln52_2_reg_863_pp0_iter2_reg == 1'd0) & (icmp_ln52_1_reg_859_pp0_iter2_reg == 1'd0) & (icmp_ln52_reg_855_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln55_12_reg_1144 <= add_ln55_12_fu_776_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_13_reg_907_pp0_iter2_reg == 1'd0) & (icmp_ln52_12_reg_903_pp0_iter2_reg == 1'd0) & (icmp_ln52_11_reg_899_pp0_iter2_reg == 1'd0) & (icmp_ln52_10_reg_895_pp0_iter2_reg == 1'd0) & (icmp_ln52_9_reg_891_pp0_iter2_reg == 1'd0) & (icmp_ln52_8_reg_887_pp0_iter2_reg == 1'd0) & (icmp_ln52_7_reg_883_pp0_iter2_reg == 1'd0) & (icmp_ln52_6_reg_879_pp0_iter2_reg == 1'd0) & (icmp_ln52_5_reg_875_pp0_iter2_reg == 1'd0) & (icmp_ln52_4_reg_871_pp0_iter2_reg == 1'd0) & (icmp_ln52_3_reg_867_pp0_iter2_reg == 1'd0) & (icmp_ln52_2_reg_863_pp0_iter2_reg == 1'd0) & (icmp_ln52_1_reg_859_pp0_iter2_reg == 1'd0) & (icmp_ln52_reg_855_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln55_13_reg_1149 <= add_ln55_13_fu_780_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_14_reg_911_pp0_iter2_reg == 1'd0) & (icmp_ln52_13_reg_907_pp0_iter2_reg == 1'd0) & (icmp_ln52_12_reg_903_pp0_iter2_reg == 1'd0) & (icmp_ln52_11_reg_899_pp0_iter2_reg == 1'd0) & (icmp_ln52_10_reg_895_pp0_iter2_reg == 1'd0) & (icmp_ln52_9_reg_891_pp0_iter2_reg == 1'd0) & (icmp_ln52_8_reg_887_pp0_iter2_reg == 1'd0) & (icmp_ln52_7_reg_883_pp0_iter2_reg == 1'd0) & (icmp_ln52_6_reg_879_pp0_iter2_reg == 1'd0) & (icmp_ln52_5_reg_875_pp0_iter2_reg == 1'd0) & (icmp_ln52_4_reg_871_pp0_iter2_reg == 1'd0) & (icmp_ln52_3_reg_867_pp0_iter2_reg == 1'd0) & (icmp_ln52_2_reg_863_pp0_iter2_reg == 1'd0) & (icmp_ln52_1_reg_859_pp0_iter2_reg == 1'd0) & (icmp_ln52_reg_855_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln55_14_reg_1154 <= add_ln55_14_fu_784_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_15_reg_915_pp0_iter2_reg == 1'd0) & (icmp_ln52_14_reg_911_pp0_iter2_reg == 1'd0) & (icmp_ln52_13_reg_907_pp0_iter2_reg == 1'd0) & (icmp_ln52_12_reg_903_pp0_iter2_reg == 1'd0) & (icmp_ln52_11_reg_899_pp0_iter2_reg == 1'd0) & (icmp_ln52_10_reg_895_pp0_iter2_reg == 1'd0) & (icmp_ln52_9_reg_891_pp0_iter2_reg == 1'd0) & (icmp_ln52_8_reg_887_pp0_iter2_reg == 1'd0) & (icmp_ln52_7_reg_883_pp0_iter2_reg == 1'd0) & (icmp_ln52_6_reg_879_pp0_iter2_reg == 1'd0) & (icmp_ln52_5_reg_875_pp0_iter2_reg == 1'd0) & (icmp_ln52_4_reg_871_pp0_iter2_reg == 1'd0) & (icmp_ln52_3_reg_867_pp0_iter2_reg == 1'd0) & (icmp_ln52_2_reg_863_pp0_iter2_reg == 1'd0) & (icmp_ln52_1_reg_859_pp0_iter2_reg == 1'd0) & (icmp_ln52_reg_855_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln55_15_reg_1159 <= add_ln55_15_fu_788_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_1_reg_859_pp0_iter2_reg == 1'd0) & (icmp_ln52_reg_855_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln55_1_reg_1089 <= add_ln55_1_fu_732_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_2_reg_863_pp0_iter2_reg == 1'd0) & (icmp_ln52_1_reg_859_pp0_iter2_reg == 1'd0) & (icmp_ln52_reg_855_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln55_2_reg_1094 <= add_ln55_2_fu_736_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_3_reg_867_pp0_iter2_reg == 1'd0) & (icmp_ln52_2_reg_863_pp0_iter2_reg == 1'd0) & (icmp_ln52_1_reg_859_pp0_iter2_reg == 1'd0) & (icmp_ln52_reg_855_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln55_3_reg_1099 <= add_ln55_3_fu_740_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_4_reg_871_pp0_iter2_reg == 1'd0) & (icmp_ln52_3_reg_867_pp0_iter2_reg == 1'd0) & (icmp_ln52_2_reg_863_pp0_iter2_reg == 1'd0) & (icmp_ln52_1_reg_859_pp0_iter2_reg == 1'd0) & (icmp_ln52_reg_855_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln55_4_reg_1104 <= add_ln55_4_fu_744_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_5_reg_875_pp0_iter2_reg == 1'd0) & (icmp_ln52_4_reg_871_pp0_iter2_reg == 1'd0) & (icmp_ln52_3_reg_867_pp0_iter2_reg == 1'd0) & (icmp_ln52_2_reg_863_pp0_iter2_reg == 1'd0) & (icmp_ln52_1_reg_859_pp0_iter2_reg == 1'd0) & (icmp_ln52_reg_855_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln55_5_reg_1109 <= add_ln55_5_fu_748_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_6_reg_879_pp0_iter2_reg == 1'd0) & (icmp_ln52_5_reg_875_pp0_iter2_reg == 1'd0) & (icmp_ln52_4_reg_871_pp0_iter2_reg == 1'd0) & (icmp_ln52_3_reg_867_pp0_iter2_reg == 1'd0) & (icmp_ln52_2_reg_863_pp0_iter2_reg == 1'd0) & (icmp_ln52_1_reg_859_pp0_iter2_reg == 1'd0) & (icmp_ln52_reg_855_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln55_6_reg_1114 <= add_ln55_6_fu_752_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_7_reg_883_pp0_iter2_reg == 1'd0) & (icmp_ln52_6_reg_879_pp0_iter2_reg == 1'd0) & (icmp_ln52_5_reg_875_pp0_iter2_reg == 1'd0) & (icmp_ln52_4_reg_871_pp0_iter2_reg == 1'd0) & (icmp_ln52_3_reg_867_pp0_iter2_reg == 1'd0) & (icmp_ln52_2_reg_863_pp0_iter2_reg == 1'd0) & (icmp_ln52_1_reg_859_pp0_iter2_reg == 1'd0) & (icmp_ln52_reg_855_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln55_7_reg_1119 <= add_ln55_7_fu_756_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_8_reg_887_pp0_iter2_reg == 1'd0) & (icmp_ln52_7_reg_883_pp0_iter2_reg == 1'd0) & (icmp_ln52_6_reg_879_pp0_iter2_reg == 1'd0) & (icmp_ln52_5_reg_875_pp0_iter2_reg == 1'd0) & (icmp_ln52_4_reg_871_pp0_iter2_reg == 1'd0) & (icmp_ln52_3_reg_867_pp0_iter2_reg == 1'd0) & (icmp_ln52_2_reg_863_pp0_iter2_reg == 1'd0) & (icmp_ln52_1_reg_859_pp0_iter2_reg == 1'd0) & (icmp_ln52_reg_855_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln55_8_reg_1124 <= add_ln55_8_fu_760_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_9_reg_891_pp0_iter2_reg == 1'd0) & (icmp_ln52_8_reg_887_pp0_iter2_reg == 1'd0) & (icmp_ln52_7_reg_883_pp0_iter2_reg == 1'd0) & (icmp_ln52_6_reg_879_pp0_iter2_reg == 1'd0) & (icmp_ln52_5_reg_875_pp0_iter2_reg == 1'd0) & (icmp_ln52_4_reg_871_pp0_iter2_reg == 1'd0) & (icmp_ln52_3_reg_867_pp0_iter2_reg == 1'd0) & (icmp_ln52_2_reg_863_pp0_iter2_reg == 1'd0) & (icmp_ln52_1_reg_859_pp0_iter2_reg == 1'd0) & (icmp_ln52_reg_855_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln55_9_reg_1129 <= add_ln55_9_fu_764_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_reg_855_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln55_reg_1084 <= add_ln55_fu_728_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln52_reg_855 <= icmp_ln52_fu_222_p2;
        zext_ln52_cast_reg_820[31 : 0] <= zext_ln52_cast_fu_198_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln52_10_reg_895_pp0_iter2_reg <= icmp_ln52_10_reg_895;
        icmp_ln52_11_reg_899_pp0_iter2_reg <= icmp_ln52_11_reg_899;
        icmp_ln52_12_reg_903_pp0_iter2_reg <= icmp_ln52_12_reg_903;
        icmp_ln52_13_reg_907_pp0_iter2_reg <= icmp_ln52_13_reg_907;
        icmp_ln52_14_reg_911_pp0_iter2_reg <= icmp_ln52_14_reg_911;
        icmp_ln52_15_reg_915_pp0_iter2_reg <= icmp_ln52_15_reg_915;
        icmp_ln52_1_reg_859_pp0_iter2_reg <= icmp_ln52_1_reg_859;
        icmp_ln52_2_reg_863_pp0_iter2_reg <= icmp_ln52_2_reg_863;
        icmp_ln52_3_reg_867_pp0_iter2_reg <= icmp_ln52_3_reg_867;
        icmp_ln52_4_reg_871_pp0_iter2_reg <= icmp_ln52_4_reg_871;
        icmp_ln52_5_reg_875_pp0_iter2_reg <= icmp_ln52_5_reg_875;
        icmp_ln52_6_reg_879_pp0_iter2_reg <= icmp_ln52_6_reg_879;
        icmp_ln52_7_reg_883_pp0_iter2_reg <= icmp_ln52_7_reg_883;
        icmp_ln52_8_reg_887_pp0_iter2_reg <= icmp_ln52_8_reg_887;
        icmp_ln52_9_reg_891_pp0_iter2_reg <= icmp_ln52_9_reg_891;
        icmp_ln52_reg_855_pp0_iter2_reg <= icmp_ln52_reg_855;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_222_p2 == 1'd0) & (icmp_ln52_1_fu_233_p2 == 1'd0) & (icmp_ln52_2_fu_244_p2 == 1'd0) & (icmp_ln52_3_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln52_4_fu_266_p2 == 1'd0) & (icmp_ln52_5_fu_277_p2 == 1'd0) & (icmp_ln52_6_fu_288_p2 == 1'd0) & (icmp_ln52_7_fu_299_p2 == 1'd0) & (icmp_ln52_8_fu_310_p2 == 1'd0) & (icmp_ln52_9_fu_321_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln52_10_reg_895 <= icmp_ln52_10_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_222_p2 == 1'd0) & (icmp_ln52_1_fu_233_p2 == 1'd0) & (icmp_ln52_2_fu_244_p2 == 1'd0) & (icmp_ln52_3_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln52_4_fu_266_p2 == 1'd0) & (icmp_ln52_5_fu_277_p2 == 1'd0) & (icmp_ln52_6_fu_288_p2 == 1'd0) & (icmp_ln52_7_fu_299_p2 == 1'd0) & (icmp_ln52_8_fu_310_p2 == 1'd0) & (icmp_ln52_9_fu_321_p2 == 1'd0) & (icmp_ln52_10_fu_332_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln52_11_reg_899 <= icmp_ln52_11_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_222_p2 == 1'd0) & (icmp_ln52_1_fu_233_p2 == 1'd0) & (icmp_ln52_2_fu_244_p2 == 1'd0) & (icmp_ln52_3_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln52_4_fu_266_p2 == 1'd0) & (icmp_ln52_5_fu_277_p2 == 1'd0) & (icmp_ln52_6_fu_288_p2 == 1'd0) & (icmp_ln52_7_fu_299_p2 == 1'd0) & (icmp_ln52_8_fu_310_p2 == 1'd0) & (icmp_ln52_9_fu_321_p2 == 1'd0) & (icmp_ln52_10_fu_332_p2 == 1'd0) & (icmp_ln52_11_fu_343_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln52_12_reg_903 <= icmp_ln52_12_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_222_p2 == 1'd0) & (icmp_ln52_1_fu_233_p2 == 1'd0) & (icmp_ln52_2_fu_244_p2 == 1'd0) & (icmp_ln52_3_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln52_4_fu_266_p2 == 1'd0) & (icmp_ln52_5_fu_277_p2 == 1'd0) & (icmp_ln52_6_fu_288_p2 == 1'd0) & (icmp_ln52_7_fu_299_p2 == 1'd0) & (icmp_ln52_8_fu_310_p2 == 1'd0) & (icmp_ln52_9_fu_321_p2 == 1'd0) & (icmp_ln52_10_fu_332_p2 == 1'd0) & (icmp_ln52_11_fu_343_p2 == 1'd0) & (icmp_ln52_12_fu_354_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln52_13_reg_907 <= icmp_ln52_13_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_222_p2 == 1'd0) & (icmp_ln52_1_fu_233_p2 == 1'd0) & (icmp_ln52_2_fu_244_p2 == 1'd0) & (icmp_ln52_3_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln52_4_fu_266_p2 == 1'd0) & (icmp_ln52_5_fu_277_p2 == 1'd0) & (icmp_ln52_6_fu_288_p2 == 1'd0) & (icmp_ln52_7_fu_299_p2 == 1'd0) & (icmp_ln52_8_fu_310_p2 == 1'd0) & (icmp_ln52_9_fu_321_p2 == 1'd0) & (icmp_ln52_10_fu_332_p2 == 1'd0) & (icmp_ln52_11_fu_343_p2 == 1'd0) & (icmp_ln52_12_fu_354_p2 == 1'd0) & (icmp_ln52_13_fu_365_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln52_14_reg_911 <= icmp_ln52_14_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_222_p2 == 1'd0) & (icmp_ln52_1_fu_233_p2 == 1'd0) & (icmp_ln52_2_fu_244_p2 == 1'd0) & (icmp_ln52_3_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln52_4_fu_266_p2 == 1'd0) & (icmp_ln52_5_fu_277_p2 == 1'd0) & (icmp_ln52_6_fu_288_p2 == 1'd0) & (icmp_ln52_7_fu_299_p2 == 1'd0) & (icmp_ln52_8_fu_310_p2 == 1'd0) & (icmp_ln52_9_fu_321_p2 == 1'd0) & (icmp_ln52_10_fu_332_p2 == 1'd0) & (icmp_ln52_11_fu_343_p2 == 1'd0) & (icmp_ln52_12_fu_354_p2 == 1'd0) & (icmp_ln52_13_fu_365_p2 == 1'd0) & (icmp_ln52_14_fu_376_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln52_15_reg_915 <= icmp_ln52_15_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln52_1_reg_859 <= icmp_ln52_1_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_222_p2 == 1'd0) & (icmp_ln52_1_fu_233_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln52_2_reg_863 <= icmp_ln52_2_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_222_p2 == 1'd0) & (icmp_ln52_1_fu_233_p2 == 1'd0) & (icmp_ln52_2_fu_244_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln52_3_reg_867 <= icmp_ln52_3_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_222_p2 == 1'd0) & (icmp_ln52_1_fu_233_p2 == 1'd0) & (icmp_ln52_2_fu_244_p2 == 1'd0) & (icmp_ln52_3_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln52_4_reg_871 <= icmp_ln52_4_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_222_p2 == 1'd0) & (icmp_ln52_1_fu_233_p2 == 1'd0) & (icmp_ln52_2_fu_244_p2 == 1'd0) & (icmp_ln52_3_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln52_4_fu_266_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln52_5_reg_875 <= icmp_ln52_5_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_222_p2 == 1'd0) & (icmp_ln52_1_fu_233_p2 == 1'd0) & (icmp_ln52_2_fu_244_p2 == 1'd0) & (icmp_ln52_3_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln52_4_fu_266_p2 == 1'd0) & (icmp_ln52_5_fu_277_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln52_6_reg_879 <= icmp_ln52_6_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_222_p2 == 1'd0) & (icmp_ln52_1_fu_233_p2 == 1'd0) & (icmp_ln52_2_fu_244_p2 == 1'd0) & (icmp_ln52_3_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln52_4_fu_266_p2 == 1'd0) & (icmp_ln52_5_fu_277_p2 == 1'd0) & (icmp_ln52_6_fu_288_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln52_7_reg_883 <= icmp_ln52_7_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_222_p2 == 1'd0) & (icmp_ln52_1_fu_233_p2 == 1'd0) & (icmp_ln52_2_fu_244_p2 == 1'd0) & (icmp_ln52_3_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln52_4_fu_266_p2 == 1'd0) & (icmp_ln52_5_fu_277_p2 == 1'd0) & (icmp_ln52_6_fu_288_p2 == 1'd0) & (icmp_ln52_7_fu_299_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln52_8_reg_887 <= icmp_ln52_8_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_222_p2 == 1'd0) & (icmp_ln52_1_fu_233_p2 == 1'd0) & (icmp_ln52_2_fu_244_p2 == 1'd0) & (icmp_ln52_3_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln52_4_fu_266_p2 == 1'd0) & (icmp_ln52_5_fu_277_p2 == 1'd0) & (icmp_ln52_6_fu_288_p2 == 1'd0) & (icmp_ln52_7_fu_299_p2 == 1'd0) & (icmp_ln52_8_fu_310_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln52_9_reg_891 <= icmp_ln52_9_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_reg_855 == 1'd0) & (icmp_ln52_10_reg_895 == 1'd0) & (icmp_ln52_9_reg_891 == 1'd0) & (icmp_ln52_8_reg_887 == 1'd0) & (icmp_ln52_7_reg_883 == 1'd0) & (icmp_ln52_6_reg_879 == 1'd0) & (icmp_ln52_5_reg_875 == 1'd0) & (icmp_ln52_4_reg_871 == 1'd0) & (icmp_ln52_3_reg_867 == 1'd0) & (icmp_ln52_2_reg_863 == 1'd0) & (icmp_ln52_1_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lshr_ln55_10_reg_1029 <= {{m_axi_gmem0_RDATA[383:352]}};
        lshr_ln55_23_reg_1034 <= {{m_axi_gmem1_RDATA[383:352]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_reg_855 == 1'd0) & (icmp_ln52_11_reg_899 == 1'd0) & (icmp_ln52_10_reg_895 == 1'd0) & (icmp_ln52_9_reg_891 == 1'd0) & (icmp_ln52_8_reg_887 == 1'd0) & (icmp_ln52_7_reg_883 == 1'd0) & (icmp_ln52_6_reg_879 == 1'd0) & (icmp_ln52_5_reg_875 == 1'd0) & (icmp_ln52_4_reg_871 == 1'd0) & (icmp_ln52_3_reg_867 == 1'd0) & (icmp_ln52_2_reg_863 == 1'd0) & (icmp_ln52_1_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lshr_ln55_11_reg_1039 <= {{m_axi_gmem0_RDATA[415:384]}};
        lshr_ln55_24_reg_1044 <= {{m_axi_gmem1_RDATA[415:384]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_reg_855 == 1'd0) & (icmp_ln52_1_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lshr_ln55_12_reg_944 <= {{m_axi_gmem1_RDATA[95:64]}};
        lshr_ln55_s_reg_939 <= {{m_axi_gmem0_RDATA[95:64]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_reg_855 == 1'd0) & (icmp_ln52_13_reg_907 == 1'd0) & (icmp_ln52_12_reg_903 == 1'd0) & (icmp_ln52_11_reg_899 == 1'd0) & (icmp_ln52_10_reg_895 == 1'd0) & (icmp_ln52_9_reg_891 == 1'd0) & (icmp_ln52_8_reg_887 == 1'd0) & (icmp_ln52_7_reg_883 == 1'd0) & (icmp_ln52_6_reg_879 == 1'd0) & (icmp_ln52_5_reg_875 == 1'd0) & (icmp_ln52_4_reg_871 == 1'd0) & (icmp_ln52_3_reg_867 == 1'd0) & (icmp_ln52_2_reg_863 == 1'd0) & (icmp_ln52_1_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lshr_ln55_13_reg_1059 <= {{m_axi_gmem0_RDATA[479:448]}};
        lshr_ln55_27_reg_1064 <= {{m_axi_gmem1_RDATA[479:448]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_reg_855 == 1'd0) & (icmp_ln52_14_reg_911 == 1'd0) & (icmp_ln52_13_reg_907 == 1'd0) & (icmp_ln52_12_reg_903 == 1'd0) & (icmp_ln52_11_reg_899 == 1'd0) & (icmp_ln52_10_reg_895 == 1'd0) & (icmp_ln52_9_reg_891 == 1'd0) & (icmp_ln52_8_reg_887 == 1'd0) & (icmp_ln52_7_reg_883 == 1'd0) & (icmp_ln52_6_reg_879 == 1'd0) & (icmp_ln52_5_reg_875 == 1'd0) & (icmp_ln52_4_reg_871 == 1'd0) & (icmp_ln52_3_reg_867 == 1'd0) & (icmp_ln52_2_reg_863 == 1'd0) & (icmp_ln52_1_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lshr_ln55_14_reg_1069 <= {{m_axi_gmem0_RDATA[511:480]}};
        lshr_ln55_28_reg_1074 <= {{m_axi_gmem1_RDATA[511:480]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_reg_855 == 1'd0) & (icmp_ln52_2_reg_863 == 1'd0) & (icmp_ln52_1_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lshr_ln55_15_reg_954 <= {{m_axi_gmem1_RDATA[127:96]}};
        lshr_ln55_2_reg_949 <= {{m_axi_gmem0_RDATA[127:96]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_reg_855 == 1'd0) & (icmp_ln52_3_reg_867 == 1'd0) & (icmp_ln52_2_reg_863 == 1'd0) & (icmp_ln52_1_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lshr_ln55_16_reg_964 <= {{m_axi_gmem1_RDATA[159:128]}};
        lshr_ln55_3_reg_959 <= {{m_axi_gmem0_RDATA[159:128]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_reg_855 == 1'd0) & (icmp_ln52_4_reg_871 == 1'd0) & (icmp_ln52_3_reg_867 == 1'd0) & (icmp_ln52_2_reg_863 == 1'd0) & (icmp_ln52_1_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lshr_ln55_17_reg_974 <= {{m_axi_gmem1_RDATA[191:160]}};
        lshr_ln55_4_reg_969 <= {{m_axi_gmem0_RDATA[191:160]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_reg_855 == 1'd0) & (icmp_ln52_5_reg_875 == 1'd0) & (icmp_ln52_4_reg_871 == 1'd0) & (icmp_ln52_3_reg_867 == 1'd0) & (icmp_ln52_2_reg_863 == 1'd0) & (icmp_ln52_1_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lshr_ln55_18_reg_984 <= {{m_axi_gmem1_RDATA[223:192]}};
        lshr_ln55_5_reg_979 <= {{m_axi_gmem0_RDATA[223:192]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_reg_855 == 1'd0) & (icmp_ln52_6_reg_879 == 1'd0) & (icmp_ln52_5_reg_875 == 1'd0) & (icmp_ln52_4_reg_871 == 1'd0) & (icmp_ln52_3_reg_867 == 1'd0) & (icmp_ln52_2_reg_863 == 1'd0) & (icmp_ln52_1_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lshr_ln55_19_reg_994 <= {{m_axi_gmem1_RDATA[255:224]}};
        lshr_ln55_6_reg_989 <= {{m_axi_gmem0_RDATA[255:224]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_reg_855 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lshr_ln55_1_reg_934 <= {{m_axi_gmem1_RDATA[63:32]}};
        lshr_ln_reg_924 <= {{m_axi_gmem0_RDATA[63:32]}};
        trunc_ln55_1_reg_929 <= trunc_ln55_1_fu_429_p1;
        trunc_ln55_reg_919 <= trunc_ln55_fu_415_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_reg_855 == 1'd0) & (icmp_ln52_7_reg_883 == 1'd0) & (icmp_ln52_6_reg_879 == 1'd0) & (icmp_ln52_5_reg_875 == 1'd0) & (icmp_ln52_4_reg_871 == 1'd0) & (icmp_ln52_3_reg_867 == 1'd0) & (icmp_ln52_2_reg_863 == 1'd0) & (icmp_ln52_1_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lshr_ln55_20_reg_1004 <= {{m_axi_gmem1_RDATA[287:256]}};
        lshr_ln55_7_reg_999 <= {{m_axi_gmem0_RDATA[287:256]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_reg_855 == 1'd0) & (icmp_ln52_8_reg_887 == 1'd0) & (icmp_ln52_7_reg_883 == 1'd0) & (icmp_ln52_6_reg_879 == 1'd0) & (icmp_ln52_5_reg_875 == 1'd0) & (icmp_ln52_4_reg_871 == 1'd0) & (icmp_ln52_3_reg_867 == 1'd0) & (icmp_ln52_2_reg_863 == 1'd0) & (icmp_ln52_1_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lshr_ln55_21_reg_1014 <= {{m_axi_gmem1_RDATA[319:288]}};
        lshr_ln55_8_reg_1009 <= {{m_axi_gmem0_RDATA[319:288]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_reg_855 == 1'd0) & (icmp_ln52_9_reg_891 == 1'd0) & (icmp_ln52_8_reg_887 == 1'd0) & (icmp_ln52_7_reg_883 == 1'd0) & (icmp_ln52_6_reg_879 == 1'd0) & (icmp_ln52_5_reg_875 == 1'd0) & (icmp_ln52_4_reg_871 == 1'd0) & (icmp_ln52_3_reg_867 == 1'd0) & (icmp_ln52_2_reg_863 == 1'd0) & (icmp_ln52_1_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lshr_ln55_22_reg_1024 <= {{m_axi_gmem1_RDATA[351:320]}};
        lshr_ln55_9_reg_1019 <= {{m_axi_gmem0_RDATA[351:320]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_reg_855 == 1'd0) & (icmp_ln52_12_reg_903 == 1'd0) & (icmp_ln52_11_reg_899 == 1'd0) & (icmp_ln52_10_reg_895 == 1'd0) & (icmp_ln52_9_reg_891 == 1'd0) & (icmp_ln52_8_reg_887 == 1'd0) & (icmp_ln52_7_reg_883 == 1'd0) & (icmp_ln52_6_reg_879 == 1'd0) & (icmp_ln52_5_reg_875 == 1'd0) & (icmp_ln52_4_reg_871 == 1'd0) & (icmp_ln52_3_reg_867 == 1'd0) & (icmp_ln52_2_reg_863 == 1'd0) & (icmp_ln52_1_reg_859 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lshr_ln55_25_reg_1049 <= {{m_axi_gmem0_RDATA[447:416]}};
        lshr_ln55_26_reg_1054 <= {{m_axi_gmem1_RDATA[447:416]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & ((icmp_ln52_fu_222_p2 == 1'd1) | ((icmp_ln52_1_fu_233_p2 == 1'd1) | ((icmp_ln52_2_fu_244_p2 == 1'd1) | ((icmp_ln52_3_fu_255_p2 == 1'd1) | ((icmp_ln52_4_fu_266_p2 == 1'd1) | ((icmp_ln52_5_fu_277_p2 == 1'd1) | ((icmp_ln52_6_fu_288_p2 == 1'd1) | ((icmp_ln52_7_fu_299_p2 == 1'd1) | ((icmp_ln52_8_fu_310_p2 == 1'd1) | ((icmp_ln52_9_fu_321_p2 == 1'd1) | ((icmp_ln52_10_fu_332_p2 == 1'd1) | ((icmp_ln52_11_fu_343_p2 == 1'd1) | ((icmp_ln52_12_fu_354_p2 == 1'd1) | ((icmp_ln52_13_fu_365_p2 == 1'd1) | ((icmp_ln52_14_fu_376_p2 == 1'd1) | (icmp_ln52_15_fu_387_p2 == 1'd1)))))))))))))))))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & ((icmp_ln52_reg_855_pp0_iter2_reg == 1'd1) | ((icmp_ln52_1_reg_859_pp0_iter2_reg == 1'd1) | ((icmp_ln52_2_reg_863_pp0_iter2_reg == 1'd1) | ((icmp_ln52_3_reg_867_pp0_iter2_reg == 1'd1) | ((icmp_ln52_4_reg_871_pp0_iter2_reg == 1'd1) | ((icmp_ln52_5_reg_875_pp0_iter2_reg == 1'd1) | ((icmp_ln52_6_reg_879_pp0_iter2_reg == 1'd1) | ((icmp_ln52_7_reg_883_pp0_iter2_reg == 1'd1) | ((icmp_ln52_8_reg_887_pp0_iter2_reg == 1'd1) | ((icmp_ln52_9_reg_891_pp0_iter2_reg == 1'd1) | ((icmp_ln52_10_reg_895_pp0_iter2_reg == 1'd1) | ((icmp_ln52_11_reg_899_pp0_iter2_reg == 1'd1) | ((icmp_ln52_12_reg_903_pp0_iter2_reg == 1'd1) | ((icmp_ln52_13_reg_907_pp0_iter2_reg == 1'd1) | ((icmp_ln52_15_reg_915_pp0_iter2_reg == 1'd1) | (icmp_ln52_14_reg_911_pp0_iter2_reg == 1'd1)))))))))))))))))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln52_reg_855 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem0_blk_n_R = m_axi_gmem0_RVALID;
    end else begin
        gmem0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem0_blk_n_W = m_axi_gmem0_WREADY;
    end else begin
        gmem0_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln52_reg_855 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem1_blk_n_R = m_axi_gmem1_RVALID;
    end else begin
        gmem1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln52_reg_855 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem0_RREADY = 1'b1;
    end else begin
        m_axi_gmem0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem0_WVALID = 1'b1;
    end else begin
        m_axi_gmem0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln52_reg_855 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem1_RREADY = 1'b1;
    end else begin
        m_axi_gmem1_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_fu_392_p2 = (i_0_fu_152 + 64'd16);

assign add_ln55_10_fu_768_p2 = (lshr_ln55_22_reg_1024 + lshr_ln55_9_reg_1019);

assign add_ln55_11_fu_772_p2 = (lshr_ln55_23_reg_1034 + lshr_ln55_10_reg_1029);

assign add_ln55_12_fu_776_p2 = (lshr_ln55_24_reg_1044 + lshr_ln55_11_reg_1039);

assign add_ln55_13_fu_780_p2 = (lshr_ln55_26_reg_1054 + lshr_ln55_25_reg_1049);

assign add_ln55_14_fu_784_p2 = (lshr_ln55_27_reg_1064 + lshr_ln55_13_reg_1059);

assign add_ln55_15_fu_788_p2 = (lshr_ln55_28_reg_1074 + lshr_ln55_14_reg_1069);

assign add_ln55_1_fu_732_p2 = (lshr_ln55_1_reg_934 + lshr_ln_reg_924);

assign add_ln55_2_fu_736_p2 = (lshr_ln55_12_reg_944 + lshr_ln55_s_reg_939);

assign add_ln55_3_fu_740_p2 = (lshr_ln55_15_reg_954 + lshr_ln55_2_reg_949);

assign add_ln55_4_fu_744_p2 = (lshr_ln55_16_reg_964 + lshr_ln55_3_reg_959);

assign add_ln55_5_fu_748_p2 = (lshr_ln55_17_reg_974 + lshr_ln55_4_reg_969);

assign add_ln55_6_fu_752_p2 = (lshr_ln55_18_reg_984 + lshr_ln55_5_reg_979);

assign add_ln55_7_fu_756_p2 = (lshr_ln55_19_reg_994 + lshr_ln55_6_reg_989);

assign add_ln55_8_fu_760_p2 = (lshr_ln55_20_reg_1004 + lshr_ln55_7_reg_999);

assign add_ln55_9_fu_764_p2 = (lshr_ln55_21_reg_1014 + lshr_ln55_8_reg_1009);

assign add_ln55_fu_728_p2 = (trunc_ln55_1_reg_929 + trunc_ln55_reg_919);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((icmp_ln52_reg_855 == 1'd0) & (m_axi_gmem0_RVALID == 1'b0)) | ((icmp_ln52_reg_855 == 1'd0) & (m_axi_gmem1_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_gmem0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((icmp_ln52_reg_855 == 1'd0) & (m_axi_gmem0_RVALID == 1'b0)) | ((icmp_ln52_reg_855 == 1'd0) & (m_axi_gmem1_RVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_gmem0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((icmp_ln52_reg_855 == 1'd0) & (m_axi_gmem0_RVALID == 1'b0)) | ((icmp_ln52_reg_855 == 1'd0) & (m_axi_gmem1_RVALID == 1'b0)))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((icmp_ln52_reg_855 == 1'd0) & (m_axi_gmem0_RVALID == 1'b0)) | ((icmp_ln52_reg_855 == 1'd0) & (m_axi_gmem1_RVALID == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1057 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln52_fu_222_p2 == 1'd0) & (icmp_ln52_1_fu_233_p2 == 1'd0) & (icmp_ln52_2_fu_244_p2 == 1'd0) & (icmp_ln52_3_fu_255_p2 == 1'd0) & (icmp_ln52_4_fu_266_p2 == 1'd0) & (icmp_ln52_5_fu_277_p2 == 1'd0) & (icmp_ln52_6_fu_288_p2 == 1'd0) & (icmp_ln52_7_fu_299_p2 == 1'd0) & (icmp_ln52_8_fu_310_p2 == 1'd0) & (icmp_ln52_9_fu_321_p2 == 1'd0) & (icmp_ln52_10_fu_332_p2 == 1'd0) & (icmp_ln52_11_fu_343_p2 == 1'd0) & (icmp_ln52_12_fu_354_p2 == 1'd0) & (icmp_ln52_13_fu_365_p2 == 1'd0) & (icmp_ln52_14_fu_376_p2 == 1'd0) & (icmp_ln52_15_fu_387_p2 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_cur_n = (gmem1_blk_n_R & gmem0_blk_n_W & gmem0_blk_n_R);

assign ap_ext_blocking_n = (ap_ext_blocking_cur_n & 1'b1);

assign ap_int_blocking_n = (1'b1 & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign icmp_ln52_10_fu_332_p2 = ((or_ln52_9_fu_326_p2 == zext_ln52_cast_reg_820) ? 1'b1 : 1'b0);

assign icmp_ln52_11_fu_343_p2 = ((or_ln52_10_fu_337_p2 == zext_ln52_cast_reg_820) ? 1'b1 : 1'b0);

assign icmp_ln52_12_fu_354_p2 = ((or_ln52_11_fu_348_p2 == zext_ln52_cast_reg_820) ? 1'b1 : 1'b0);

assign icmp_ln52_13_fu_365_p2 = ((or_ln52_12_fu_359_p2 == zext_ln52_cast_reg_820) ? 1'b1 : 1'b0);

assign icmp_ln52_14_fu_376_p2 = ((or_ln52_13_fu_370_p2 == zext_ln52_cast_reg_820) ? 1'b1 : 1'b0);

assign icmp_ln52_15_fu_387_p2 = ((or_ln52_14_fu_381_p2 == zext_ln52_cast_reg_820) ? 1'b1 : 1'b0);

assign icmp_ln52_1_fu_233_p2 = ((or_ln52_fu_227_p2 == zext_ln52_cast_reg_820) ? 1'b1 : 1'b0);

assign icmp_ln52_2_fu_244_p2 = ((or_ln52_1_fu_238_p2 == zext_ln52_cast_reg_820) ? 1'b1 : 1'b0);

assign icmp_ln52_3_fu_255_p2 = ((or_ln52_2_fu_249_p2 == zext_ln52_cast_reg_820) ? 1'b1 : 1'b0);

assign icmp_ln52_4_fu_266_p2 = ((or_ln52_3_fu_260_p2 == zext_ln52_cast_reg_820) ? 1'b1 : 1'b0);

assign icmp_ln52_5_fu_277_p2 = ((or_ln52_4_fu_271_p2 == zext_ln52_cast_reg_820) ? 1'b1 : 1'b0);

assign icmp_ln52_6_fu_288_p2 = ((or_ln52_5_fu_282_p2 == zext_ln52_cast_reg_820) ? 1'b1 : 1'b0);

assign icmp_ln52_7_fu_299_p2 = ((or_ln52_6_fu_293_p2 == zext_ln52_cast_reg_820) ? 1'b1 : 1'b0);

assign icmp_ln52_8_fu_310_p2 = ((or_ln52_7_fu_304_p2 == zext_ln52_cast_reg_820) ? 1'b1 : 1'b0);

assign icmp_ln52_9_fu_321_p2 = ((or_ln52_8_fu_315_p2 == zext_ln52_cast_reg_820) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_222_p2 = ((i_0_fu_152 == zext_ln52_cast_reg_820) ? 1'b1 : 1'b0);

assign m_axi_gmem0_ARADDR = 64'd0;

assign m_axi_gmem0_ARBURST = 2'd0;

assign m_axi_gmem0_ARCACHE = 4'd0;

assign m_axi_gmem0_ARID = 1'd0;

assign m_axi_gmem0_ARLEN = 32'd0;

assign m_axi_gmem0_ARLOCK = 2'd0;

assign m_axi_gmem0_ARPROT = 3'd0;

assign m_axi_gmem0_ARQOS = 4'd0;

assign m_axi_gmem0_ARREGION = 4'd0;

assign m_axi_gmem0_ARSIZE = 3'd0;

assign m_axi_gmem0_ARUSER = 1'd0;

assign m_axi_gmem0_ARVALID = 1'b0;

assign m_axi_gmem0_AWADDR = 64'd0;

assign m_axi_gmem0_AWBURST = 2'd0;

assign m_axi_gmem0_AWCACHE = 4'd0;

assign m_axi_gmem0_AWID = 1'd0;

assign m_axi_gmem0_AWLEN = 32'd0;

assign m_axi_gmem0_AWLOCK = 2'd0;

assign m_axi_gmem0_AWPROT = 3'd0;

assign m_axi_gmem0_AWQOS = 4'd0;

assign m_axi_gmem0_AWREGION = 4'd0;

assign m_axi_gmem0_AWSIZE = 3'd0;

assign m_axi_gmem0_AWUSER = 1'd0;

assign m_axi_gmem0_AWVALID = 1'b0;

assign m_axi_gmem0_BREADY = 1'b0;

assign m_axi_gmem0_WDATA = {{{{{{{{{{{{{{{{add_ln55_15_reg_1159}, {add_ln55_14_reg_1154}}, {add_ln55_13_reg_1149}}, {add_ln55_12_reg_1144}}, {add_ln55_11_reg_1139}}, {add_ln55_10_reg_1134}}, {add_ln55_9_reg_1129}}, {add_ln55_8_reg_1124}}, {add_ln55_7_reg_1119}}, {add_ln55_6_reg_1114}}, {add_ln55_5_reg_1109}}, {add_ln55_4_reg_1104}}, {add_ln55_3_reg_1099}}, {add_ln55_2_reg_1094}}, {add_ln55_1_reg_1089}}, {add_ln55_reg_1084}};

assign m_axi_gmem0_WID = 1'd0;

assign m_axi_gmem0_WLAST = 1'b0;

assign m_axi_gmem0_WSTRB = 64'd18446744073709551615;

assign m_axi_gmem0_WUSER = 1'd0;

assign m_axi_gmem1_ARADDR = 64'd0;

assign m_axi_gmem1_ARBURST = 2'd0;

assign m_axi_gmem1_ARCACHE = 4'd0;

assign m_axi_gmem1_ARID = 1'd0;

assign m_axi_gmem1_ARLEN = 32'd0;

assign m_axi_gmem1_ARLOCK = 2'd0;

assign m_axi_gmem1_ARPROT = 3'd0;

assign m_axi_gmem1_ARQOS = 4'd0;

assign m_axi_gmem1_ARREGION = 4'd0;

assign m_axi_gmem1_ARSIZE = 3'd0;

assign m_axi_gmem1_ARUSER = 1'd0;

assign m_axi_gmem1_ARVALID = 1'b0;

assign m_axi_gmem1_AWADDR = 64'd0;

assign m_axi_gmem1_AWBURST = 2'd0;

assign m_axi_gmem1_AWCACHE = 4'd0;

assign m_axi_gmem1_AWID = 1'd0;

assign m_axi_gmem1_AWLEN = 32'd0;

assign m_axi_gmem1_AWLOCK = 2'd0;

assign m_axi_gmem1_AWPROT = 3'd0;

assign m_axi_gmem1_AWQOS = 4'd0;

assign m_axi_gmem1_AWREGION = 4'd0;

assign m_axi_gmem1_AWSIZE = 3'd0;

assign m_axi_gmem1_AWUSER = 1'd0;

assign m_axi_gmem1_AWVALID = 1'b0;

assign m_axi_gmem1_BREADY = 1'b0;

assign m_axi_gmem1_WDATA = 512'd0;

assign m_axi_gmem1_WID = 1'd0;

assign m_axi_gmem1_WLAST = 1'b0;

assign m_axi_gmem1_WSTRB = 64'd0;

assign m_axi_gmem1_WUSER = 1'd0;

assign m_axi_gmem1_WVALID = 1'b0;

assign or_ln52_10_fu_337_p2 = (i_0_fu_152 | 64'd11);

assign or_ln52_11_fu_348_p2 = (i_0_fu_152 | 64'd12);

assign or_ln52_12_fu_359_p2 = (i_0_fu_152 | 64'd13);

assign or_ln52_13_fu_370_p2 = (i_0_fu_152 | 64'd14);

assign or_ln52_14_fu_381_p2 = (i_0_fu_152 | 64'd15);

assign or_ln52_1_fu_238_p2 = (i_0_fu_152 | 64'd2);

assign or_ln52_2_fu_249_p2 = (i_0_fu_152 | 64'd3);

assign or_ln52_3_fu_260_p2 = (i_0_fu_152 | 64'd4);

assign or_ln52_4_fu_271_p2 = (i_0_fu_152 | 64'd5);

assign or_ln52_5_fu_282_p2 = (i_0_fu_152 | 64'd6);

assign or_ln52_6_fu_293_p2 = (i_0_fu_152 | 64'd7);

assign or_ln52_7_fu_304_p2 = (i_0_fu_152 | 64'd8);

assign or_ln52_8_fu_315_p2 = (i_0_fu_152 | 64'd9);

assign or_ln52_9_fu_326_p2 = (i_0_fu_152 | 64'd10);

assign or_ln52_fu_227_p2 = (i_0_fu_152 | 64'd1);

assign trunc_ln55_1_fu_429_p1 = m_axi_gmem1_RDATA[31:0];

assign trunc_ln55_fu_415_p1 = m_axi_gmem0_RDATA[31:0];

assign zext_ln52_cast_fu_198_p1 = zext_ln52;

always @ (posedge ap_clk) begin
    zext_ln52_cast_reg_820[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //krnl_vadd_krnl_vadd_Pipeline_vadd1
